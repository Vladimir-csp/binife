#!/bin/bash
# binife - BASH ini file editor
# by Vladimir Kudrya
# https://github.com/Vladimir-csp/
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version. See <http://www.gnu.org/licenses/>.

# binife can currently read, write/add, remove single value.

show_help(){
	echo  $"Usage:""
	$(basename "$0") get" $"inifile section key""
	$(basename "$0") set" $"inifile section key value""
	$(basename "$0") del" $"inifile section key""

"$"Example:""
	$(basename "$0") set .config/myapp.conf behavior killallhumans true

"$"All arguments are mandatory.
Section may be empty (use empty quotes as argument).
Quotes are stripped on 'get' action if present.

INI Format handling specifics:
	Sections are enclosed in '[]'.
	Empty sections are written as absense of section.
	Keys and values are delimited with '='.
	Leading and trailing whitespaces around keys and values are discarded.
	Whitespaces inside keys and values are preserved even if unquoted.
	Values containing spaces are written quoted.
	Keys containing spaces are written unquoted.
	Of any duplicated items, only first is acted upon.
	"
}

echo_error(){
	echo "$@" >&2
}

echo_debug(){
	[ -n "$DEBUG" ] && [ "$DEBUG" -ge "1" ] >/dev/null 2>/dev/null && echo "$@"
}

trim_spaces() {
	local TRIMVAR=$@
	TRIMVAR="${TRIMVAR#"${TRIMVAR%%[![:space:]]*}"}"
	TRIMVAR="${TRIMVAR%"${TRIMVAR##*[![:space:]]}"}"
	echo -n "$TRIMVAR"
}

trim_quotes() {
	local TRIMVAR=$@
	TRIMVAR="${TRIMVAR#[\'\"]}"
	TRIMVAR="${TRIMVAR%[\'\"]}"
	echo -n "$TRIMVAR"
}


trim_single_quotes() {
	local TRIMVAR=$@
	TRIMVAR="${TRIMVAR#[\']}"
	TRIMVAR="${TRIMVAR%[\']}"
	echo -n "$TRIMVAR"
}

trim_double_quotes() {
	local TRIMVAR=$@
	TRIMVAR="${TRIMVAR#[\"]}"
	TRIMVAR="${TRIMVAR%[\"]}"
	echo -n "$TRIMVAR"
}

trim_all_quotes() {
	local TRIMVAR=$@
	TRIMVAR="${TRIMVAR#"${TRIMVAR%%[!\'\"]*}"}"
	TRIMVAR="${TRIMVAR%"${TRIMVAR##*[!\'\"]}"}"
	echo -n "$TRIMVAR"
}

trim_square_brackets(){
	local TRIMVAR=$@
	TRIMVAR="${TRIMVAR#\[}"
	TRIMVAR="${TRIMVAR%\]}"
	echo -n "$TRIMVAR"
}

ini_get(){
	# depends on trim_*, echo_error functions

	local INIFILE="$1"
	local SECTION="$2"
	local KEY="$3"
	
	[ ! -r "$INIFILE" ] && { echo_error $"Can not read file" "\"$INIFILE\"" ; return 1 ; }
	[ -z "$KEY" ] && { echo_error $"No ini key given as argument 3" ; return 1 ; }
	cat "$INIFILE" | while IFS='' read LINE
	do
		# trim spaces around data
		LINE="$(trim_spaces "$LINE")"
		
		# ignore comments
		[ "${LINE:0:1}" = ";" -o "${LINE:0:1}" = "#" ] && continue

		# get section
		[ "${LINE:0:1}" = "[" ] && local DATA_SECTION="$(trim_spaces "$(trim_square_brackets "$LINE")")" && continue

		# ignore line without delimiter
		[ "$LINE" = "${LINE//=/0}" ] && continue

		# get key
		local DATA_KEY="$(trim_spaces "${LINE%%=*}")"

		# if section an key match, get to the data
		if [ "$DATA_SECTION" = "$SECTION" ] && [ "$DATA_KEY" = "$KEY" ]
		then
			# get value
			local DATA_VALUE="$(trim_spaces "${LINE#*=}")"

			# handle paired quotes
			if [ "${DATA_VALUE:0:1}" = "'" -o "${DATA_VALUE:0:1}" = "\"" ] && [ "${DATA_VALUE:0:1}" = "${DATA_VALUE:(-1):1}" ]
			then
				# unquote
				local DATA_VALUE="$(trim_quotes "$DATA_VALUE")"
			fi
			echo "$DATA_VALUE"
		fi
	done
}

ini_set(){
	# depends on trim_*, echo_error functions

	local INIFILE="$1"
	local SECTION="$2"
	local KEY="$3"
	local VALUE="$4"

	# if inifile does not exist, create with newline
	[ ! -e "$INIFILE" ] && { echo_error > "$INIFILE" || echo $"Can not create file" \"$INIFILE\" ; return 1 ; }
	
	# can we read/write the file?
	[ ! -r "$INIFILE" ] && { echo_error $"Can not read file" "\"$INIFILE\"" ; return 1 ; }
	[ ! -w "$INIFILE" ] && { echo_error $"Can not write to file" "\"$INIFILE\"" ; return 1 ; }

	[ -z "$KEY" ] && { echo_error $"No ini key given as argument 3" ; return 1 ; }

	# if value contains whitespaces and is unquoted, quote it
	if [ "$VALUE" != "${VALUE//[[:space:]]/0}" ]
	then
		[ "${VALUE:0:1}" = "'" -o "${VALUE:0:1}" = "\"" ] && [ "${VALUE:0:1}" = "${VALUE:(-1):1}" ] || local VALUE="\"$VALUE\""
	fi

	local REPLACED=false

	local DATA="$(cat "$INIFILE")"
	echo "$DATA" | {
		while IFS='' read ORIG_LINE
		do
			# trim spaces around data, keep raw line intact
			local LINE="$(trim_spaces "$ORIG_LINE")"
	
			# just echo line if comment
			[ "${LINE:0:1}" = ";" -o "${LINE:0:1}" = "#" ] && { echo "$ORIG_LINE" ; continue ; }
	
			# if line is a section
			if [ "${LINE:0:1}" = "[" ] && [ "${LINE:(-1):1}" = "]" ]
			then
				# if in previous section there were no matches, add value now
				[ "$DATA_SECTION" = "$SECTION" ] && [ "$REPLACED" != "true" ] && { echo "$KEY=$VALUE" ; REPLACED=true ; }
				# get section
				local DATA_SECTION="$(trim_spaces "$(trim_square_brackets "$LINE")")"
				# return section line
				echo "$ORIG_LINE"
				continue
			fi
	
			# just echo line without delimiter
			[ "$LINE" = "${LINE//=/0}" ] && { echo "$ORIG_LINE" ; continue ; }
	
			# get key
			local DATA_KEY="$(trim_spaces "${LINE%%=*}")"
	
			# if section and key match and no replacemet took place,
			# echo original line with updated value (saving anything we can, but old value), otherwise echo original line
			if [ "$DATA_SECTION" = "$SECTION" ] && [ "$DATA_KEY" = "$KEY" ] &&  [ "$REPLACED" != "true" ]
			then
				echo "${ORIG_LINE%%=*}=$VALUE"
				local REPLACED=true
			else
				echo "${ORIG_LINE}"
			fi
		done 
		# add section and key if not found inside above cycle
		if [ "$REPLACED" != "true" ]
		then
			[ -n "$SECTION" ] && [ "$DATA_SECTION" != "$SECTION" ] && echo "[$SECTION]"
			echo -e "$KEY=$VALUE"
		fi
	} > "$INIFILE"
}

ini_del(){
	# depends on trim_*, echo_error functions

	local INIFILE="$1"
	local SECTION="$2"
	local KEY="$3"

	# if inifile does not exist do nothing
	[ ! -e "$INIFILE" ] && { echo_error $"File does not exist:" \"$INIFILE\" ; return 1 ; }
	
	# can we read/write the file?
	[ ! -r "$INIFILE" ] && { echo_error $"Can not read file" "\"$INIFILE\"" ; return 1 ; }
	[ ! -w "$INIFILE" ] && { echo_error $"Can not write to file" "\"$INIFILE\"" ; return 1 ; }

	[ -z "$KEY" ] && { echo_error $"No ini key given as argument 3" ; return 1 ; }

	local REMOVED=false

	local DATA="$(cat "$INIFILE")"
	echo "$DATA" | {
		while IFS='' read ORIG_LINE
		do
			# trim spaces around data, keep raw line intact
			local LINE="$(trim_spaces "$ORIG_LINE")"
	
			# just echo line if comment
			[ "${LINE:0:1}" = ";" -o "${LINE:0:1}" = "#" ] && { echo "$ORIG_LINE" ; continue ; }
	
			# if line is a section
			if [ "${LINE:0:1}" = "[" ] && [ "${LINE:(-1):1}" = "]" ]
			then
				# get section
				local DATA_SECTION="$(trim_spaces "$(trim_square_brackets "$LINE")")"
				# return section line
				echo "$ORIG_LINE"
				continue
			fi
	
			# just echo line without delimiter
			[ "$LINE" = "${LINE//=/0}" ] && { echo "$ORIG_LINE" ; continue ; }
	
			# get key
			local DATA_KEY="$(trim_spaces "${LINE%%=*}")"
	
			# if section and key match and nothing got removed so far, do not return line
			# echo original line with updated value (saving anything we can, but old value), otherwise echo original line
			if [ "$DATA_SECTION" = "$SECTION" ] && [ "$DATA_KEY" = "$KEY" ] &&  [ "$REMOVED" != "true" ]
			then
				local REMOVED=true
				true
			else
				echo "${ORIG_LINE}"
			fi
		done 
	} > "$INIFILE"
}

ACTION="$1"
shift
echo "$ACTION" | grep -qi 'help\|\-h' && { show_help ; exit 0 ; }

if [ "$ACTION" = "get" ] && [ "$#" = "3" ]
then
	ini_get "$@"
elif [ "$ACTION" = "set" ] && [ "$#" = "4" ]
then
	ini_set "$@"
elif [ "$ACTION" = "del" ] && [ "$#" = "3" ]
then
	ini_del "$@"
else
	echo_error "Wrong arguments for action $ACTION"
	show_help >&2
	exit 1
fi
